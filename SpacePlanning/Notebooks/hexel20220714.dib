#!fsharp

// Coordinates
type Xyz = { X : int
             Y : int
             Z : double }

// Available, Boundary, Coordinates
type Hxl = { A : bool
             B : bool
             C : Xyz }

// Coxel : Collection of Hexels
module Coxel = 
    // Valid Hexel Coordinates
    let xyzVldXyz (xyz : Xyz) : Xyz = 
        match (xyz.X % 2 = 0) with 
        | true -> { xyz with Y = xyz.Y - (xyz.Y % 4) + 1 }
        | false -> { xyz with Y = xyz.Y - (xyz.Y % 4) + 3 }

    // Adjacent Hexels
    let xyzAdjXyz (hxl : Hxl) : Xyz list = 
        let vldHxl = {hxl with C = xyzVldXyz (hxl.C)}
        match vldHxl.A with 
        | true -> List.map2 (fun x y -> { 
                                            X = hxl.C.X + x
                                            Y = hxl.C.Y + y
                                            Z = hxl.C.Z 
                                        }
                            )
                            [-2;-1;1;2;1;-1] [0;2;2;0;-2;-2]
        | false -> []

    // Host Availability
    let hxlHstAvl (hxl : Hxl) (occ : Hxl list) : Hxl = 
        let xyzOc1 = List.map (fun x -> x.C) occ
        let lgt =  List.except (hxl.C :: xyzAdjXyz hxl) xyzOc1
                    |> List.length
        match (lgt = 0) with 
        | true -> { hxl with A = false }
        | false -> hxl

    // Duplicate check
    let hxlAvlChk (hxl : Hxl list) =
        hxl 
        |> List.groupBy (fun x -> x.C) 
        |> List.map (fun(_,x) -> List.distinct x) 
        |> List.map (fun x -> match (List.length x > 1) with
                                    | true -> List.map (fun a -> { (a:Hxl) with A = false })x 
                                            |> List.distinct
                                    | false -> x )
        
    // Unique Hexels
    let hxlUnqAvl (hxl : Hxl list) : Hxl list  = 
        let hxl1 = List.groupBy(fun x -> x.C) hxl
        let xyz1 = List.map (fun ( x, _ ) -> x) hxl1
        let avl1 = List.map (fun ( _, x ) -> x) hxl1
                |> List.map (fun x -> List.map (fun x -> x.A)x)
                |> List.map (fun x -> List.contains false x)
                |> List.map (fun x -> x = false)
        List.map2 (fun x y -> {A = y ; B = false ; C = x}) xyz1 avl1
        
    // Incremental Hexel
    let hxlIncHx1 (hxl : Hxl) (occ : Hxl list) : Hxl = 
        let hx1 = hxlHstAvl hxl occ
        match (hx1.A) with 
        | true -> 
                    let xyzOc1 = List.map (fun x -> x.C) occ
                    match hxl.A with 
                    | true -> 
                        let inc = hxl 
                                |> xyzAdjXyz 
                                |> List.except xyzOc1 
                                |> List.tryHead
                        match inc with 
                        | None -> { hxl with A = false }
                        | Some inc-> hxlHstAvl { 
                                                    A = true
                                                    B = false
                                                    C = Some inc |> Option.get 
                                                } occ
                    | false -> hxl
        | false -> hx1
        
    // Simultaneous Increment
    let hxlIncHx2 (hxl : Hxl list list) (occ : Hxl list)  = 
        let rec hxInOgs1 (hxl : Hxl list) (occ : Hxl list) (acc : Hxl list) = 
            match hxl with 
            | [] -> acc
            | a :: b -> 
                        let acc = acc @ [hxlIncHx1 a occ]
                        let occ = (acc @ occ) @ hxl
                        hxInOgs1 b occ acc
        
        let av1 = List.map (fun x -> List.filter (fun x -> x.A = true)x) hxl
        let lg1 = List.map (fun x -> List.isEmpty x) av1 
                |> List.contains true
        let hx1 = match lg1 with 
                    | true -> []
                    | false ->  let hd1 = List.map (fun x -> List.head x) av1
                                let in1 = hxInOgs1 hd1 occ [] |> List.chunkBySize 1
                                                    
                                let lc1 = [hxl;in1] 
                                        |> List.transpose 
                                        |> List.map (fun x -> List.concat x) 
                                        |> List.map (fun x -> List.distinct x)
                                lc1

        hx1 |> List.map (fun x -> hxlAvlChk x) |> List.map (fun x -> List.concat x)
    
    // Simultaneous Increase
    let hxlIncHx3 (hxl : Hxl list list) (occ : Hxl list) (cnt : int) : Hxl list list = 
        
        let rec hxIncHx3 (hxl : Hxl list list) (occ : Hxl list) (cnt : int) = 
            let ttl = (List.length hxl) * cnt
            match (List.length (List.concat hxl) < ttl) || (List.length (List.concat hxl) = 0) with 
            | false -> hxl
            | true -> 
                    let hxl = hxlIncHx2 hxl occ
                    let occ = [List.concat hxl ; occ] |> List.concat |> List.distinct
                    hxIncHx3  hxl occ cnt
        hxIncHx3 hxl occ cnt
    

    // Test Zone
    // Sample initial host origins 
    let smXyLc1 = { X=0;Y=0;Z=0 } |> xyzVldXyz
    let smHxLc1 = { A = true; B = false; C = smXyLc1}
    let smHxOc1 = xyzAdjXyz smHxLc1 |> List.map (fun x -> {A = true; B = false; C = x})
    let smHxOc2 = smHxLc1 :: smHxOc1 |> List.map (fun x -> hxlHstAvl x smHxOc1 )
    let smHxLc2 = List.take 5 smHxOc1 |> List.chunkBySize 1
    let a = hxlIncHx2 smHxLc2 smHxOc2
    let o1 = [List.concat a ; smHxOc2] |> List.concat |> List.distinct
    let a1 = hxlIncHx2 a o1
    let o2 = [List.concat a1 ; o1] |> List.concat |> List.distinct
    let a2 = hxlIncHx2 a1 o2
    let o3 = [List.concat a2 ; o2] |> List.concat
    let a3 = hxlIncHx2 a2 o3
    //let o4 = [List.concat a3 ; o3] |> List.concat
    //let a4 = hxlIncHx2 a3 o4
    //let o5 = [List.concat a4 ; o4] |> List.concat
    //let a5 = hxlIncHx2 a4 o5
    let b = hxlIncHx3 smHxLc2 smHxOc2 50
    b

Coxel.smHxOc1

#!fsharp

type Hxl = 
    | Host of int * int * double
    | Nost of int * int * double

let adj (hst : Hxl) = 
    let vld:Hxl = 
        match hst with 
        | Host (x,y,z) when (x % 2 = 0) -> Host (x, y - (y % 4) + 1, z)
        | Host (x,y,z) -> Host (x, y-(y%4) + 3, z)
        | Nost (x,y,z) when (x % 2 = 0) -> Nost (x, y - (y % 4) + 1, z)
        | Nost (x,y,z) -> Nost (x, y-(y%4) + 3, z)

    match vld with 
    | Host (x,y,z) -> 
        List.map2 (fun a b -> 
            Host (x + a, (y - (y % 4) + 1) + b, z) ) 
            [0; -2; -1; 1; 2; 1; -1] 
            [0; 0; 2; 2; 0; -2; -2]
    | Nost _ -> [vld]

let inc (hst : Hxl) (occ : Hxl list) = 
    match hst with 
    | Nost _ -> adj hst 
                |> List.head
    | Host (x,y,z) when 
        (List.except  occ (adj hst) 
        |> List.length) = 0 
        -> adj (Nost (x,y,z)) 
            |> List.head
    | Host _ -> List.except occ (adj hst) 
                |> List.tail
                |> List.head

let inr (hst : Hxl list) (occ : Hxl list) = 
    let inc1 = List.map (fun x ->
                                    let hx1 = inc x occ
                                    let occ = (inc x occ) :: occ
                                    hx1 ) hst
    inc1
//Testing
let oc1 = adj (Host (0,0,0))
let hs1 = oc1.[1..3]
let ad1 = inc (oc1.[0]) oc1
let in1 = inr hs1 oc1
in1
