#!fsharp

// Coordinates and Host bool
type XYZ = { X : int ; Y : int ; Z : double }

// Convert invalid coordinates to valid hexel grid coordinates
let hxVldOg (og : XYZ) = 
    match (og.X % 2 = 0) with 
    | true -> { X = og.X ; Y = og.Y - (og.Y % 4) + 1 ; Z = og.Z }
    | false -> { X = og.X ; Y = og.Y - (og.Y % 4) + 3 ; Z = og.Z }

// Adjacent Hexel Origins XY
let hxAdjOg (og : XYZ) = 
    List.map2 (fun x y -> { X = og.X + x; Y = og.Y + y ; Z = og.Z })
        [-2;-1;1;2;1;-1] [0;2;2;0;-2;-2]

// Incremental hexel 
let hxIncOg (og : XYZ) (oc : XYZ list) = 
    let ic = og |> hxAdjOg |> List.except oc |> List.tryHead
    match ic with 
    | None -> og 
    | Some ic-> Some ic |> Option.get

let hxInOgs (og : XYZ list) (oc : XYZ list) = 
    let rec hxInOgs1 (og : XYZ list) (oc : XYZ list) = 
        match og with 
        | [] -> []
        | a :: b -> 
                    let c = hxIncOg a oc
                    let oc = c :: oc
                    c :: hxInOgs1 b oc
                    
    let ic1 = hxInOgs1 og oc
    [og ; ic1] |> List.transpose |> List.map (fun x -> List.distinct x)


// Sample initial host origins 
let smplOr = { X=0;Y=0;Z=0 } |> hxVldOg
let smplC1 = smplOr |> hxAdjOg
let smplC2 = smplOr :: smplC1
let smplOg = smplC1 |> List.take 3


//hxIncOg smplOr smplC2
//hxInOgs smplOg smplC2
let a = hxInOgs smplOg smplC2
let b = List.map (fun x -> List.head x) a
let c = List.concat [smplC2 ; List.concat a] |> List.distinct

let d = hxInOgs b c
let e = List.map (fun x -> List.head x) d
let f = List.concat [c ;List.concat d] |> List.distinct

hxInOgs e f

//smplC2
//smplOg
//hxMlOgs (hxInOgs smplOg smplC2) smplC2 6
//[smplOg ; smplC2 ; hxInOgs smplOg smplC2]
